<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4" project_name="Project">
    <include path="dev_rm.xml"/>
    <!-- Description of Node Models (used by Groot) -->
    <TreeNodesModel>
        <Condition ID="IsAttacked">
            <output_port name="gimbal_yaw" default="{gimbal_yaw}" type="std::string">Move gimbal_yaw to the direction of the hit armor plate</output_port>
            <output_port name="gimbal_pitch" default="{gimbal_pitch}" type="std::string">Move gimbal_pitch (const 0.0) to the direction of the hit armor plate</output_port>
            <input_port name="key_port" default="{@robot_status}" type="pb_rm_interfaces::msg::RobotStatus_&lt;std::allocator&lt;void&gt; &gt;">RobotStatus port on blackboard</input_port>
        </Condition>
        <Condition ID="IsGameStatus">
            <input_port name="max_remain_time" default="420" type="int">Maximum remaining time (s)</input_port>
            <input_port name="min_remain_time" default="0" type="int">Minimum remaining time (s)</input_port>
            <input_port name="expected_game_progress" default="4" type="int">Expected game progress stage</input_port>
            <input_port name="key_port" default="{@game_status}" type="pb_rm_interfaces::msg::GameStatus_&lt;std::allocator&lt;void&gt; &gt;">GameStatus port on blackboard</input_port>
        </Condition>
        <Condition ID="IsRfidDetected">
            <input_port name="friendly_supply_zone_exchange" default="false" type="bool">己方与兑换区重叠的补给区</input_port>
            <input_port name="friendly_supply_zone_non_exchange" default="false" type="bool">己方与兑换区不重叠的补给区 / RMUL 补给区</input_port>
            <input_port name="center_gain_point" default="false" type="bool">中心增益点（仅 RMUL 适用）</input_port>
            <input_port name="friendly_fortress_gain_point" default="false" type="bool">己方堡垒增益点</input_port>
            <input_port name="key_port" default="{@rfid_status}" type="pb_rm_interfaces::msg::RfidStatus_&lt;std::allocator&lt;void&gt; &gt;">RfidStatus port on blackboard</input_port>
        </Condition>
        <Condition ID="IsStatusOK">
            <input_port name="ammo_min" default="0" type="int">Lower then minimum ammo will return FAILURE</input_port>
            <input_port name="heat_max" default="350" type="int">Maximum heat. NOTE: Sentry heat limit is 400</input_port>
            <input_port name="hp_min" default="300" type="int">Minimum HP. NOTE: Sentry init/max HP is 400</input_port>
            <input_port name="key_port" default="{@robot_status}" type="pb_rm_interfaces::msg::RobotStatus_&lt;std::allocator&lt;void&gt; &gt;">RobotStatus port on blackboard</input_port>
        </Condition>
        <Action ID="PubJointState">
            <input_port name="gimbal_pitch" default="{gimbal_pitch}" type="std::string">Expected Pitch angle (rad) of the gimbal</input_port>
            <input_port name="gimbal_yaw" default="{gimbal_yaw}" type="std::string">Expected Yaw angle (rad) of the gimbal</input_port>
            <input_port name="duration" type="std::chrono::milliseconds">Publish then sleep duration in milliseconds</input_port>
            <input_port name="topic_name" default="__default__placeholder__" type="std::string">Topic name</input_port>
        </Action>
        <Condition ID="PubNav2Goal">
            <input_port name="goal_x" default="0.000000" type="float">Goal x coordinate</input_port>
            <input_port name="goal_y" default="0.000000" type="float">Goal y coordinate</input_port>
            <input_port name="goal_yaw" default="0.000000" type="float">Goal orientation (yaw)</input_port>
            <input_port name="topic_name" default="__default__placeholder__" type="std::string">Topic name</input_port>
        </Condition>
        <Action ID="PublishTwist">
            <input_port name="v_y" default="0.000000" type="double">Linear Y velocity (m/s)</input_port>
            <input_port name="v_yaw" default="0.000000" type="double">Angular Z velocity (rad/s)</input_port>
            <input_port name="v_x" default="0.000000" type="double">Linear X velocity (m/s)</input_port>
            <input_port name="duration" type="std::chrono::milliseconds">Publish then sleep duration in milliseconds</input_port>
            <input_port name="topic_name" default="__default__placeholder__" type="std::string">Topic name</input_port>
        </Action>
        <Decorator ID="RateController">
            <input_port name="hz" default="10.000000" type="double">Rate</input_port>
        </Decorator>
        <Control ID="RecoveryNode">
            <input_port name="num_attempts" default="999" type="int">Number of retries</input_port>
        </Control>
        <Action ID="SendNav2Goal">
            <input_port name="goal_x" default="0.000000" type="float">Goal x coordinate</input_port>
            <input_port name="goal_y" default="0.000000" type="float">Goal y coordinate</input_port>
            <input_port name="goal_yaw" default="0.000000" type="float">Goal orientation (yaw)</input_port>
            <input_port name="action_name" type="std::string">Action server name</input_port>
        </Action>
        <Decorator ID="TickAfterTimeout">
            <input_port name="timeout" type="float">time in s to wait before ticking child again</input_port>
        </Decorator>
    </TreeNodesModel>
</root>
