<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4" main_tree_to_execute="Main">
  <!-- ===== Main：统一调度 dev_rm + rmul_2025 ===== -->
<BehaviorTree ID="Main">
  <KeepRunningUntilFailure>
    <ForceSuccess>
      <!-- ForceSuccess 只能有 1 个子节点，因此把主体包在一个 Sequence 里 -->
      <Sequence>

        <!-- 1) 开局检测 + 自转 -->
        <SubTree ID="check_game_start"/>
        <PublishSpinSpeed spin_speed="7.0" duration="200" topic_name="cmd_spin"/>

        <!-- 2) 顶层优先式：先看是否需要补给；不需要则进入作战（攻击/默认点位） -->
        <ReactiveFallback>

          <!-- 2.1 需要补给？(IsStatusOK 取反) 需要则执行补给，不再进入作战分支 -->
          <Sequence>
            <Inverter>
              <IsStatusOK ammo_min="0" heat_max="350" hp_min="480" key_port="{@referee_robotStatus}"/>
            </Inverter>
            <!-- 这里放你的补给子树/动作；示例用 rmul_supply，你自己的 ID/参数照填 -->
            <SubTree ID="rmul_supply"/>
          </Sequence>

          <!-- 2.2 作战：能打就打；打不到就去默认点位 -->
          <ReactiveFallback>

            <!-- 2.2.1 攻击链 -->
            <Sequence>
              
              <IsDetectEnemy armor_id="1;2;3;4;5;7" max_distance="8.0" key_port="{@detector_armors}"/>
              <CalculateAttackPose
                  costmap_port="{nav_globalCostmap}"
                  tracker_port="{tracker_target}"
                  goal="{attack_pose}"
                  topic_name="debug_attack_pose"/>
              <PubNav2Goal goal="{attack_pose}" topic_name="goal_pose"/>
            </Sequence>

            <!-- 2.2.2 默认点位（RateController 是装饰器，只能带 1 个子节点，所以再包一层 Sequence） -->
            <RateController hz="5.0">
              <Sequence>
                <SubTree ID="check_robot_status"/>
                <PubNav2Goal goal="4.65;-3.5;0" topic_name="goal_pose"/>
              </Sequence>
            </RateController>

          </ReactiveFallback>
        </ReactiveFallback>

      </Sequence>
    </ForceSuccess>
  </KeepRunningUntilFailure>
</BehaviorTree>



  <!-- ===== rmul_2025：开赛判定 / 状态检查 ===== -->
  <BehaviorTree ID="supply_monitor">
  <!-- 条件为真（不OK）时执行补给；否则执行Else分支。整体始终SUCCESS。 -->
    <WhileDoElse>
    <!-- 不OK？（注意 Inverter 反转：IsStatusOK 失败 => 条件为真） -->
      <Inverter>
        <IsStatusOK ammo_min="0" heat_max="350" hp_min="200"
                  key_port="{@referee_robotStatus}"/>
      </Inverter>

    <!-- Do: 去补给（你原来的 rmul_supply 子树会自己发布补给路径/等待补给） -->
      <SubTree ID="rmul_supply"/>

    <!-- Else: 什么也不做，但保持SUCCESS -->
      <AlwaysSuccess/>
    </WhileDoElse>
  </BehaviorTree>

  <BehaviorTree ID="check_game_start">
    <Fallback>
      
      <IsGameStatus name="IsGameStart" max_remain_time="420" min_remain_time="0"
                    expected_game_progress="4" key_port="{@referee_gameStatus}"/>
        <!--
        <Sequence>
          <PublishSpinSpeed spin_speed="0.0" duration="0.2" topic_name="cmd_spin"/>
          <PublishTwist v_y="0.0" v_yaw="0.0" v_x="0.0" duration="0.2" topic_name="cmd_vel"/>
        </Sequence>
        -->
      <AlwaysSuccess/>
    </Fallback>
  </BehaviorTree>

  <BehaviorTree ID="check_robot_status">
    <Fallback>
      <IsStatusOK ammo_min="0" heat_max="350" hp_min="300" key_port="{@referee_robotStatus}"/>
      <ForceFailure>
        <Fallback>
          <IsRfidDetected friendly_supply_zone_exchange="false" friendly_supply_zone_non_exchange="true"
                          center_gain_point="false" friendly_fortress_gain_point="false"
                          key_port="{@referee_rfidStatus}"/>
          <PubNav2Goal goal="0;0;0" topic_name="goal_pose"/>
        </Fallback>
      </ForceFailure>
    </Fallback>
  </BehaviorTree>

  <!-- ===== dev_rm：补给逻辑 ===== -->
  <BehaviorTree ID="rmul_supply">
    <WhileDoElse>
      <IsRfidDetected friendly_supply_zone_exchange="false" friendly_supply_zone_non_exchange="true"
                      center_gain_point="false" friendly_fortress_gain_point="false"
                      key_port="{@referee_rfidStatus}"/>
      <RetryUntilSuccessful num_attempts="-1">
        <IsStatusOK ammo_min="0" heat_max="100" hp_min="399" key_port="{@referee_robotStatus}"/>
      </RetryUntilSuccessful>
      <Sequence>
        <PubNav2Goal goal="0;0;0"
                        topic_name="navigate_to_pose"/>
      
      </Sequence><!--
        <PubNav2Goal topic_name="/goal_pose" goal="{goal}" />
        !-->
        
      
    </WhileDoElse>
  </BehaviorTree>

  <!-- ===== 你的六个测试树：保留用于单独联调 ===== -->
  <BehaviorTree ID="test_attack_pose">
    <KeepRunningUntilFailure>
      <ForceSuccess>
        <Sequence>
          <CalculateAttackPose costmap_port="{@nav_globalCostmap}" tracker_port="{@tracker_target}"
                               goal="{attack_pose}" topic_name="debug_attack_pose"/>
          <PubNav2Goal goal="{attack_pose}" topic_name="goal_pose"/>
        </Sequence>
      </ForceSuccess>
    </KeepRunningUntilFailure>
  </BehaviorTree>

  <BehaviorTree ID="test_attacked_feedback">
    <KeepRunningUntilFailure>
      <WhileDoElse>
        <IsAttacked gimbal_yaw="{gimbal_yaw}" gimbal_pitch="{gimbal_pitch}"
                    key_port="{@referee_robotStatus}"/>
        <Sequence>
          <PublishGimbalAbsolute topic_name="cmd_gimbal" duration="500"
                                 gimbal_yaw="{gimbal_yaw}" gimbal_pitch="{gimbal_pitch}"/>
          <PublishTwist v_y="0.0" v_yaw="3.14" v_x="0.0" duration="2000" topic_name="cmd_vel"/>
          <PublishTwist v_y="0.0" v_yaw="0.0" v_x="1.0"  duration="1000" topic_name="cmd_vel"/>
          <PublishTwist v_y="0.0" v_yaw="3.14" v_x="1.0"  duration="1000" topic_name="cmd_vel"/>
        </Sequence>
        <AlwaysSuccess/>
      </WhileDoElse>
    </KeepRunningUntilFailure>
  </BehaviorTree>

  <BehaviorTree ID="test_gimbal_absolute">
    <PublishGimbalAbsolute topic_name="cmd_gimbal" duration="5000"
                           gimbal_yaw="-1.57" gimbal_pitch="1.0"/>
  </BehaviorTree>

  <BehaviorTree ID="test_gimbal_velocity">
    <PublishGimbalVelocity duration="5000" yaw_min="-1.57" pitch_min="-0.3"
                           yaw_max="1.57" pitch_max="0.3"
                           gimbal_vel_yaw="1.5" gimbal_vel_pitch="1.0"
                           topic_name="cmd_gimbal"/>
  </BehaviorTree> 

  <BehaviorTree ID="test_go_to_supply">
    <Repeat num_cycles="-1">
      <WhileDoElse>
        <IsStatusOK ammo_min="0" heat_max="350" hp_min="350" key_port="{@referee_robotStatus}"/>
        <Sequence>
          <PubNav2Goal topic_name="/goal_pose" goal="{goal}" />
        
        
        </Sequence>
        <SubTree ID="rmul_supply"/>
      </WhileDoElse>
    </Repeat>
  </BehaviorTree>

  <BehaviorTree ID="test_is_detect_enemy">
    <ReactiveFallback>
      <Inverter>
        <IsDetectEnemy armor_id="1;2;3;4;5;7" max_distance="8.0" key_port="{@detector_armors}"/>
      </Inverter>
      <PublishTwist v_y="0.0" v_yaw="6.28" v_x="0.0" duration="3000" topic_name="cmd_vel"/>
    </ReactiveFallback>
  </BehaviorTree>




  <!-- === 节点模型（Models）合并：使用你提供的 models.xml === -->
  <TreeNodesModel>
    <!-- Conditions -->
    <Condition ID="CalculateAttackPose">
      <input_port name="costmap_port" type="nav_msgs::msg::OccupancyGrid_<std::allocator<void> >" default="{nav_globalCostmap}"/>
      <input_port name="tracker_port" type="auto_aim_interfaces::msg::Target_<std::allocator<void> >" default="{tracker_target}"/>
      <output_port name="goal" type="geometry_msgs::msg::PoseStamped_<std::allocator<void> >" default="{attack_pose}"/>
      <input_port name="topic_name" type="std::string" default="__default__placeholder__"/>
    </Condition>
    <Condition ID="IsAttacked">
      <output_port name="gimbal_yaw" type="float" default="{gimbal_yaw}"/>
      <output_port name="gimbal_pitch" type="float" default="{gimbal_pitch}"/>
      <input_port name="key_port" type="pb_rm_interfaces::msg::RobotStatus_<std::allocator<void> >" default="{referee_robotStatus}"/>
    </Condition>
    <Condition ID="IsDetectEnemy">
      <input_port name="armor_id" type="std::vector<int, std::allocator<int> >" default="1;2;3;4;5;7"/>
      <input_port name="max_distance" type="float" default="8.000000"/>
      <input_port name="key_port" type="auto_aim_interfaces::msg::Armors_<std::allocator<void> >" default="{detector_armors}"/>
    </Condition>
    <Condition ID="IsGameStatus">
      <input_port name="max_remain_time" type="int" default="420"/>
      <input_port name="min_remain_time" type="int" default="0"/>
      <input_port name="expected_game_progress" type="int" default="4"/>
      <input_port name="key_port" type="pb_rm_interfaces::msg::GameStatus_<std::allocator<void> >" default="{referee_gameStatus}"/>
    </Condition>
    <Condition ID="IsRfidDetected">
      <input_port name="friendly_supply_zone_exchange" type="bool" default="false"/>
      <input_port name="friendly_supply_zone_non_exchange" type="bool" default="false"/>
      <input_port name="center_gain_point" type="bool" default="false"/>
      <input_port name="friendly_fortress_gain_point" type="bool" default="false"/>
      <input_port name="key_port" type="pb_rm_interfaces::msg::RfidStatus_<std::allocator<void> >" default="{referee_rfidStatus}"/>
    </Condition>
    <Condition ID="IsStatusOK">
      <input_port name="ammo_min" type="int" default="0"/>
      <input_port name="heat_max" type="int" default="350"/>
      <input_port name="hp_min" type="int" default="300"/>
      <input_port name="key_port" type="pb_rm_interfaces::msg::RobotStatus_<std::allocator<void> >" default="{referee_robotStatus}"/>
    </Condition>
    <Condition ID="PubNav2Goal">
      <input_port name="goal" type="geometry_msgs::msg::PoseStamped_<std::allocator<void> >" default="0;0;0"/>
      <input_port name="topic_name" type="std::string" default="__default__placeholder__"/>
    </Condition>

    <!-- Actions -->
    <Action ID="PublishGimbalAbsolute">
      <input_port name="topic_name" type="std::string" default="__default__placeholder__"/>
      <input_port name="duration" type="std::chrono::milliseconds"/>
      <input_port name="gimbal_yaw" type="float"/>
      <input_port name="gimbal_pitch" type="float"/>
    </Action>
    <Action ID="PublishGimbalVelocity">
      <input_port name="duration" type="std::chrono::milliseconds"/>
      <input_port name="yaw_min" type="float" default="-3.140000"/>
      <input_port name="pitch_min" type="float" default="-1.570000"/>
      <input_port name="yaw_max" type="float" default="3.140000"/>
      <input_port name="pitch_max" type="float" default="1.570000"/>
      <input_port name="gimbal_vel_yaw" type="float" default="0.000000"/>
      <input_port name="topic_name" type="std::string" default="__default__placeholder__"/>
      <input_port name="gimbal_vel_pitch" type="float" default="0.000000"/>
    </Action>
    <Action ID="PublishSpinSpeed">
      <input_port name="spin_speed" type="double" default="0.000000"/>
      <input_port name="duration" type="std::chrono::milliseconds" default=""/>
      <input_port name="topic_name" type="std::string" default="__default__placeholder__"/>
    </Action>
    <Action ID="PublishTwist">
      <input_port name="v_y" type="double" default="0.000000"/>
      <input_port name="v_yaw" type="double" default="0.000000"/>
      <input_port name="v_x" type="double" default="0.000000"/>
      <input_port name="duration" type="std::chrono::milliseconds" default=""/>
      <input_port name="topic_name" type="std::string" default="__default__placeholder__"/>
    </Action>
    <Action ID="SendNav2Goal">
      <input_port name="goal" type="geometry_msgs::msg::PoseStamped_<std::allocator<void> >" default="0;0;0"/>
      <input_port name="action_name" type="std::string" default=""/>
    </Action>

    <!-- Decorators / Controls -->
    <Decorator ID="RateController">
      <input_port name="hz" type="double" default="10.000000"/>
    </Decorator>
    <Decorator ID="TickAfterTimeout">
      <input_port name="timeout" type="float"/>
    </Decorator>
    <Control ID="RecoveryNode">
      <input_port name="num_attempts" type="int" default="999"/>
    </Control>
  </TreeNodesModel>
</root>
