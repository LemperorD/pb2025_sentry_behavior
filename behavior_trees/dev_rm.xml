<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4">
  <BehaviorTree ID="rmul_supply">
    <WhileDoElse>
      <IsRfidDetected friendly_supply_zone_exchange="false"
                      friendly_supply_zone_non_exchange="true"
                      center_gain_point="false"
                      friendly_fortress_gain_point="false"
                      key_port="{@referee_rfidStatus}"/>
      <RetryUntilSuccessful num_attempts="-1">
        <IsStatusOK ammo_min="0"
                    heat_max="100"
                    hp_min="399"
                    key_port="{@referee_robotStatus}"/>
      </RetryUntilSuccessful>
      <Sequence>
        <PubNav2Goal goal_x="0.000000"
                     goal_y="0.000000"
                     goal_yaw="0.000000"
                     topic_name="goal_pose"/>
        <Sleep msec="500"/>
      </Sequence>
    </WhileDoElse>
  </BehaviorTree>

  <BehaviorTree ID="test_attacked_feedback">
    <KeepRunningUntilFailure>
      <WhileDoElse>
        <IsAttacked gimbal_yaw="{gimbal_yaw}"
                    gimbal_pitch="{gimbal_pitch}"
                    key_port="{@referee_robotStatus}"/>
        <Sequence>
          <PubJointState gimbal_pitch="{gimbal_pitch}"
                         gimbal_yaw="{gimbal_yaw}"
                         duration="500"
                         topic_name="cmd_gimbal_joint"/>
          <PublishTwist v_y="0.0"
                        v_yaw="3.14"
                        v_x="0.0"
                        duration="2000"
                        topic_name="cmd_vel"/>
          <PublishTwist v_y="0.0"
                        v_yaw="0.0"
                        v_x="1.0"
                        duration="1000"
                        topic_name="cmd_vel"/>
          <PublishTwist v_y="0.0"
                        v_yaw="3.14"
                        v_x="1.0"
                        duration="1000"
                        topic_name="cmd_vel"/>
        </Sequence>
        <AlwaysSuccess/>
      </WhileDoElse>
    </KeepRunningUntilFailure>
  </BehaviorTree>

  <BehaviorTree ID="test_go_to_supply">
    <Repeat num_cycles="-1">
      <WhileDoElse>
        <IsStatusOK ammo_min="0"
                    heat_max="350"
                    hp_min="350"
                    key_port="{@referee_robotStatus}"/>
        <Sequence>
          <PubNav2Goal goal_x="3.000000"
                       goal_y="0.000000"
                       goal_yaw="0.000000"
                       topic_name="goal_pose"/>
          <Sleep msec="500"/>
        </Sequence>
        <SubTree ID="rmul_supply"/>
      </WhileDoElse>
    </Repeat>
  </BehaviorTree>

  <BehaviorTree ID="test_is_detect_enemy">
    <ReactiveFallback>
      <IsDetectEnemy armor_id="1;2;3;4;5;7"
                     max_distance="8.0"
                     key_port="{@tracker_target}"/>
      <PublishTwist v_y="0.0"
                    v_yaw="6.28"
                    v_x="0.0"
                    duration="3000"
                    topic_name="cmd_vel"/>
    </ReactiveFallback>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Condition ID="IsAttacked">
      <output_port name="gimbal_yaw"
                   default="{gimbal_yaw}"
                   type="float">Move gimbal_yaw to the direction of the hit armor plate</output_port>
      <output_port name="gimbal_pitch"
                   default="{gimbal_pitch}"
                   type="float">Move gimbal_pitch (const 0.0) to the direction of the hit armor plate</output_port>
      <input_port name="key_port"
                  default="{@referee_robotStatus}"
                  type="pb_rm_interfaces::msg::RobotStatus_&lt;std::allocator&lt;void&gt; &gt;">RobotStatus port on blackboard</input_port>
    </Condition>
    <Condition ID="IsDetectEnemy">
      <input_port name="armor_id"
                  default="1;2;3;4;5;7"
                  type="std::vector&lt;int, std::allocator&lt;int&gt; &gt;">Expected id of armors. Multiple numbers should be separated by the character `;` in Groot2</input_port>
      <input_port name="max_distance"
                  default="8.000000"
                  type="float">Distance to enemy target</input_port>
      <input_port name="key_port"
                  default="{@tracker_target}"
                  type="auto_aim_interfaces::msg::Target_&lt;std::allocator&lt;void&gt; &gt;">Vision target port on blackboard</input_port>
    </Condition>
    <Condition ID="IsRfidDetected">
      <input_port name="friendly_supply_zone_exchange"
                  default="false"
                  type="bool">己方与兑换区重叠的补给区</input_port>
      <input_port name="friendly_supply_zone_non_exchange"
                  default="false"
                  type="bool">己方与兑换区不重叠的补给区 / RMUL 补给区</input_port>
      <input_port name="center_gain_point"
                  default="false"
                  type="bool">中心增益点（仅 RMUL 适用）</input_port>
      <input_port name="friendly_fortress_gain_point"
                  default="false"
                  type="bool">己方堡垒增益点</input_port>
      <input_port name="key_port"
                  default="{@referee_rfidStatus}"
                  type="pb_rm_interfaces::msg::RfidStatus_&lt;std::allocator&lt;void&gt; &gt;">RfidStatus port on blackboard</input_port>
    </Condition>
    <Condition ID="IsStatusOK">
      <input_port name="ammo_min"
                  default="0"
                  type="int">Lower then minimum ammo will return FAILURE</input_port>
      <input_port name="heat_max"
                  default="350"
                  type="int">Maximum heat. NOTE: Sentry heat limit is 400</input_port>
      <input_port name="hp_min"
                  default="300"
                  type="int">Minimum HP. NOTE: Sentry init/max HP is 400</input_port>
      <input_port name="key_port"
                  default="{@referee_robotStatus}"
                  type="pb_rm_interfaces::msg::RobotStatus_&lt;std::allocator&lt;void&gt; &gt;">RobotStatus port on blackboard</input_port>
    </Condition>
    <Action ID="PubJointState">
      <input_port name="gimbal_pitch"
                  default="{gimbal_pitch}"
                  type="float">Expected Pitch angle (rad) of the gimbal</input_port>
      <input_port name="gimbal_yaw"
                  default="{gimbal_yaw}"
                  type="float">Expected Yaw angle (rad) of the gimbal</input_port>
      <input_port name="duration"
                  type="std::chrono::milliseconds">Publish then sleep duration in milliseconds</input_port>
      <input_port name="topic_name"
                  default="__default__placeholder__"
                  type="std::string">Topic name</input_port>
    </Action>
    <Condition ID="PubNav2Goal">
      <input_port name="goal_x"
                  default="0.000000"
                  type="float">Goal x coordinate</input_port>
      <input_port name="goal_y"
                  default="0.000000"
                  type="float">Goal y coordinate</input_port>
      <input_port name="goal_yaw"
                  default="0.000000"
                  type="float">Goal orientation (yaw)</input_port>
      <input_port name="topic_name"
                  default="__default__placeholder__"
                  type="std::string">Topic name</input_port>
    </Condition>
    <Action ID="PublishTwist">
      <input_port name="v_y"
                  default="0.000000"
                  type="double">Linear Y velocity (m/s)</input_port>
      <input_port name="v_yaw"
                  default="0.000000"
                  type="double">Angular Z velocity (rad/s)</input_port>
      <input_port name="v_x"
                  default="0.000000"
                  type="double">Linear X velocity (m/s)</input_port>
      <input_port name="duration"
                  type="std::chrono::milliseconds">Publish then sleep duration in milliseconds</input_port>
      <input_port name="topic_name"
                  default="__default__placeholder__"
                  type="std::string">Topic name</input_port>
    </Action>
  </TreeNodesModel>

</root>
